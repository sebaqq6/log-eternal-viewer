//Includes
const express = require('express');
const mysql = require('mysql');
const bodyParser = require('body-parser');
const fs = require('fs');
const ejs = require('ejs');
const rateLimit = require('express-rate-limit');
const { format } = require('path');
const { log } = require('console');
console.log(`LogEternalViewer by JrDesmond (aka sebaqq6) loading...`);
//app config
const app = express();
const port = 5000;
const logsPerPage = 200;

const config = JSON.parse(fs.readFileSync('config.json', 'utf8'));
const connection = mysql.createConnection({
  host: config.host,
  port: config.port,
  user: config.user,
  password: config.password,
  database: config.database
});

// Konfiguracja anty-ddos:
const limiter = rateLimit({
  windowMs: 2 * 1000, // seconds * 1000;
  max: 16,
});
app.set('trust proxy', 2);
app.use('/api', limiter);


connection.connect(err => {
  if (err) {
    console.error('Błąd połączenia z bazą danych: ' + err.stack);
    return;
  }
  console.log('Połączono z bazą danych MySQL jako ID: ' + connection.threadId);
  //delete unused sessions generated by console:
  const currentDate = new Date();
  const timestamp = Math.floor(currentDate.getTime() / 1000);
  connection.query("DELETE FROM logviewersessions WHERE expire < ? AND session = playerName;", [timestamp]);
});


app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: true }));
app.use(express.static(__dirname + '/public'));


const template = fs.readFileSync('./index.html', 'utf-8');

let secondTimer = setInterval(oneSecondTimer, 1000);
let counter = 1;
const ipMap = new Map();
const lastAPIREQ = new Map();
const online = new Map();


//-----------------MAIN PAGE------------------------------
app.get('/', (req, res) => {
  let session = req.query.session || -1;
  if (session.length != 9) {
    res.send("Niepoprawna lub wygasła sesja.");
    return;
  }
  let ipAddress = req.ip.split(':').pop();
  
  /*if(ipAddress == "127.0.0.1")//if localhost, get IP from proxy
  {
    let headersIp = req.headers['x-real-ip'];
    if(headersIp != "undefined" ) ipAddress = headersIp;
  } */
  console.log("[INFO] Próba zalogowania: " + ipAddress + "...");
  const page = ejs.render(template, {
    sessionPlaceholder: session
  });
  res.send(page);
});


//----------------------API PAGE---------------------------
app.get("/api", async (req, res) => {
  let ipAddress = req.ip.split(':').pop();

  let session = req.query.session || -1;
  let logPage = req.query.logPage || -1;
  let logType = req.query.logType || -1;
  let logSearch = req.query.search || -1;
  let logDateStart = req.query.dateStart || -1;
  let logDateEnd = req.query.dateEnd || -1;
  let logStartIndex = req.query.indexStart || 0;
  //----------------------------------------------------------------
  let print = "[APIREQ][" + ipAddress + "] => " + req.url;
  if (logStartIndex == 0 && print != lastAPIREQ.get(ipAddress)) {
    const params = parseURL(req.url);
    let baseUrl = req.url.split('?')[0];
    let queryParams = [];

    for (const [key, value] of Object.entries(params)) {
      queryParams.push(`${colorText(key, 96)}=\x1b[1m${colorText(value, 92)}\x1b[0m`);
    }

    let coloredLog = `${baseUrl}?${queryParams.join('&')}`;

    if (ipMap.has(ipAddress)) {
      coloredLog = "[APIREQ][\x1b[1m\x1b[31m" + ipMap.get(ipAddress) + "\x1b[0m\x1b[0m] => " + coloredLog;
    } else {
      coloredLog = "[APIREQ][" + ipAddress + "] => " + coloredLog;
    }

    console.log(coloredLog);
    lastAPIREQ.set(ipAddress, print);
  }

  if (session.length != 9) {
    res.json({ sessionInfo: { status: 0 } });
    return;
  }

  if (logPage < 1 && logPage != -1) logPage = 1;
  else if (logPage > 99999999) logPage = 99999999;

  if (logType < -1 || logType > 3) logType = -1;

  if (logSearch.length > 100) {
    logSearch = logSearch.substring(0, 100);
  }

  if (logDateStart == -1 || logDateEnd == -1 || dateToTimestamp(logDateStart) > dateToTimestamp(logDateEnd) || dateToTimestamp(logDateStart) == 0 || dateToTimestamp(logDateEnd) == 0) {
    logDateStart = "2000-01-01T00:00";
    logDateEnd = "2050-01-01T00:00";
  }

  if (logStartIndex < 0) logStartIndex = 0;
  //----------------------------------set header
  res.setHeader('Content-Type', 'application/json');

  const currentDate = new Date();
  const timestamp = Math.floor(currentDate.getTime() / 1000);
  online.set(ipAddress, timestamp);

  connection.query('SELECT * FROM logviewersessions WHERE ? < expire AND session=?;', [timestamp, session], (error, results) => {
    if (error) throw error;

    if (results.length > 0) {
      const sessionData = results[0];
      if (sessionData.ip != ipAddress) {
        if (sessionData.ip == -1 || ipAddress == "95.216.245.98") {
          console.log(`\x1b[1m\x1b[31m[Register] Rejestracja adresu IP ${ipAddress} dla sesji: ${session}...\x1b[0m\x1b[0m`);
          const expireUpdate = timestamp + 60 * 60 * 24;
          connection.query("UPDATE logviewersessions SET ip = ?, expire = ? WHERE session = ?;", [ipAddress, expireUpdate, session]);
          res.json({ sessionInfo: { status: -1 } });
          return;
        } else {
          res.json({ sessionInfo: { status: 0 } });
          console.log("[ERROR] Invalid IP(sessionip!=requestip): " + sessionData.ip + " != " + ipAddress);
          return;
        }
      }
      if(session == sessionData.playerName) {
        const expireUpdate = timestamp + 60 * 60 * 24;
        connection.query("UPDATE logviewersessions SET expire = ? WHERE session = ?;", [expireUpdate, session]);
      }
      let sessionInfoJSON = {
        sessionInfo: {
          status: 1,
          session: sessionData.session,
          playerName: sessionData.playerName,
          ip: sessionData.ip,
          expire: sessionData.expire,
          created: sessionData.created
        }
      };
      if (logPage == -1) {
        console.log(`[LOGIN] Zalogowano ${sessionData.playerName} (IP: ${ipAddress})`);
        ipMap.set(ipAddress, sessionData.playerName);
      }

      if (logPage != -1) {
        let queryGetLogs = 'SELECT id, text, type, DATE_FORMAT(date, "%Y-%m-%d %H:%i:%s") AS formattedDate \
          FROM logserver \
          WHERE type LIKE ? AND \
          date BETWEEN ? AND ? AND \
          text LIKE ? \
          AND id > ?\
          ORDER BY id DESC \
          LIMIT ?, ?';
        let varGetLogsType = (logType != -1) ? "%" + logType + "%" : "%%";
        let varGetLogsSearch = (logSearch != -1) ? "%" + logSearch + "%" : "%%";
        const varGetLogsPageOffset = (logPage - 1) * logsPerPage;
        let hQueryGetLogs = connection.query(queryGetLogs, [varGetLogsType, logDateStart, logDateEnd, varGetLogsSearch, logStartIndex, varGetLogsPageOffset, logsPerPage], (error, results) => {
          if (error) throw error;
          if (results.length > 0) {
            lastIndex = results[0].id;
          } else {
            lastIndex = -1;
          }
          const entryLog = results.map(row => {
            return {
              text: row.text,
              date: row.formattedDate,
              type: row.type
            };
          });

          let queryCount = "SELECT COUNT(*) AS totalCount \
        FROM logserver \
        WHERE type LIKE ? AND \
        date BETWEEN ? AND ? AND \
        text LIKE ? \
        AND id > ?\;"

          connection.query(queryCount, [varGetLogsType, logDateStart, logDateEnd, varGetLogsSearch, logStartIndex], (error, results) => {
            if (error) throw error;
            const totalCount = results[0].totalCount;
            let totalPages = Math.ceil(totalCount / logsPerPage);
            if (totalPages < 1) totalPages = 1;
            let logDataJSON = { logData: { totalEntries: totalCount, totalPages: totalPages, page: logPage, lastIndex: lastIndex, entryLog } };
            res.json({ ...sessionInfoJSON, ...logDataJSON });
          });
        });
      } else {/
        res.json(sessionInfoJSON);
      }
      //------------------------------
    } else {
      res.json({ sessionInfo: { status: 0 } });
    }
  });
});

function dateToTimestamp(value) {
  const date = new Date(value);
  let result = Math.floor(date.getTime() / 1000);
  if (isNaN(result)) result = 0;
  return result;
}


function parseURL(url) {
  const queryString = url.split('?')[1];
  const params = new URLSearchParams(queryString);
  return Object.fromEntries(params.entries());
}

function colorText(text, colorCode) {
  return `\x1b[${colorCode}m${text}\x1b[0m`;
}

function getOnline() {
  const currentDate = new Date();
  const timestamp = Math.floor(currentDate.getTime() / 1000);
  console.log("---------------------------------------------");
  console.log("Użytkownicy ONLINE: ");
  console.log(" ");
  let lp = 1;
  online.forEach((value, key) => {
    if (value > timestamp - 15) {
      let id = key;
      if (ipMap.has(key)) {
        id = ipMap.get(key);
      }
      let strLog = `${lp}. ${id}`;
      console.log(strLog);
      lp++;
    }
  });
  if (lp == 1) console.log("-brak-")
  console.log("---------------------------------------------");
}

let stdin = process.openStdin();
stdin.addListener("data", function (d) {
  let command = d.toString().trim();
  switch (command) {
    case "help": {
      console.log("Komendy:");
      console.log("list - Wyświetla użytkowików online.");
      break;
    }
    case "list": {
      getOnline();
      break;
    }
    case "remap": {
      ipMap.clear();
      break;
    }
  }
});

app.listen(port, () => {
  console.log(`LogEternalViewer server nasłuchuje na porcie ${port}`);
  console.log("Wpisz 'help' aby sprawdzić listę komend.")
});


function oneSecondTimer() {
  //counter++;
}
